#!/usr/bin/env bash
######################################################################
#
# yocto_install.sh
#
# Install a yocto build in for common use after a build.
#
# Inputs:
#    - The local.conf file used for the build.  This provides the
#      release version (RELEASE_VERSION), and the localtion of the
#      build directory (TMPDIR).
#    - Where to put it...
#    - If this is a qsp build (no sdk, and use the .hddimg instead
#      of the .wic).
#
# Notes:
#    - MUST be run on the build server to access the local disk!
#
######################################################################

# Export everything
set -a

# Version
VERSION=__VERSION__

# Name
SCRIPT_NAME=$(basename "${0}")

# Script directory
SCRIPT_DIR=`dirname $0`
pushd ${SCRIPT_DIR} >/dev/null 2>&1
SCRIPT_DIR=$(pwd)
popd >/dev/null 2>&1

#############
# Functions #
#############

function getdv {
    if [ -f /etc/os-release ]; then
	# freedesktop.org and systemd
	. /etc/os-release
	DISTRO=$NAME
	VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
	# linuxbase.org
	DISTRO=$(lsb_release -si)
	VER=$(lsb_release -sr)
    else
	# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
	DISTRO=$(uname -s)
	VER=$(uname -r)
    fi

    echo "$DISTRO:$VER"
}

function script_info {
    echo "--> ${SCRIPT_NAME} version is ${VERSION}"
    echo "--> running on $(getdv)"
}

function sdk {
    FROM="${1}"
    TO="${2}"
    ionice -c idle cp -r $FROM $TO
    pushd $TO/.. >/dev/null 2>&1
    ./sdk/*dev*sh -y -d $(pwd)/tools
    popd >/dev/null 2>&1
    echo "--> SDK copied and intalled!"
}

function images {
    FROM="${1}"
    TO="${2}"
    QSP="${3}"
    ionice -c idle cp -r $FROM $TO
    echo "--> Images intalled!"
    pushd "${TO}" 2>&1 >/dev/null

    if [ "$QSP" = "true" ]
    then
	EXT=hddimg
    else
	EXT=wic
    fi

    for i in $(find . -type f -name "*${EXT}" | cut -c'3-')
    do
	base=$(echo $i | sed -e 's/\-\-.*//')
	craff -o $base.craff $i
    done
    popd 2>&1 >/dev/null
    echo "--> Image .craffs created!"
}

############
# Defaults #
############

CONFIG=""
INSTALL=""
KEEP_TEMP="false"
LINUX=""
QSP="false"
TAG=""

######################################################################
# usage_
#
# Display usage and exit with the given code.

function usage {
    cat << EOF
${SCRIPT_NAME} [-c|--config <file>] [-h|--help] [-i|--install <directory>] [-k|--keep] [-v|--version]
  -c : The Yocto conf/local.conf file.
  -h : Display this wonderful help screen.
  -i : Install directory.
  -k : Keep temporary output instead of deleting it.
  -q : QSP install -- there is no SDK and hddimg instead of wic for the craff.
  -v : Display the version.
EOF
    exit $1
}

##################################
# Parse the command line options #
##################################

ARGS=$(getopt -a -o c:hi:kqv --long config:,help,install:,keep,qsp,version -- "$@")

if [[ $? -gt 0 ]]
then
    usage 1
fi

eval set -- ${ARGS}
while :
do
    case $1 in
        -c | --config) CONFIG=$2 ; shift 2 ;;
        -h | --help) usage 0 ; shift ;;
        -i | --install) INSTALL=$2 ; shift 2 ;;
	-k | --keep) KEEP_TEMP="true" ; shift ;;
	-q | --qsp) QSP="true" ; shift ;;
	-v | --version) script_info ; exit 0 ;;
	--) shift ; break ;;
        *) usage 1 ;;
    esac
done

# $@ has all the options after --

##########################################
# Capture stdout and stdin in a log file #
##########################################

exec 3<&1
exec 4<&2

# Create a log file and redirect. 
TEMP=$(mktemp -d /tmp/${SCRIPT_NAME}.XXXXXXXXXXXX)
LOG=$TEMP/log
PIPE=$TEMP/pipe

if [ "$KEEP_TEMP" = "true" ]
then
    echo "--> Saving temporary files in ${TEMP}"
else
    trap "rm -rf $TEMP" EXIT
fi

mknod $PIPE p
tee <$PIPE $LOG &
exec 1>&-
exec 1>$PIPE
exec 2>&-
exec 2>$PIPE

#######################
# Do something useful #
#######################

# Find the "images" and the "sdk" directories. ##
#################################################

# There are many assumptions!  Basically, it is assumed that the given
# conf/local.conf "worked" (the build was successful).

if [ -e "${INSTALL}" ]
then
    echo "${INSTALL} already exits!"
    exit 1
fi

INSTALL_PARENT="$(dirname "${INSTALL}")"

if [ -d "${INSTALL_PARENT}" ]
then
    # Make sure the parent directory is part of the axxiaguest groups
    # and has g+s!
    GROUP="$(stat -c "%G" "${INSTALL_PARENT}")"

    if [ "${GROUP}" != "axxiaguest" ]
    then
	echo "--> The parent directory MUST be part of the axxiaguest group!"
	exit 1
    fi

    PERMS="$(stat -c "%a" "${INSTALL_PARENT}")"

    if [ $PERMS -ne 2755 ]
    then
	echo "--> Permissions should be 'drwxr-sr-x'"
	exit 1
    fi
else
    mkdir -p "${INSTALL_PARENT}"
    chgrp axxiaguest "${INSTALL_PARENT}" || exit 1
    chmod g+s "${INSTALL_PARENT}" || exit 1
fi

mkdir -p "${INSTALL}" || exit 1

if [ ! -r "${CONFIG}" ]
then
    echo "${CONFIG} is not readable!"
    rm -rf "${INSTALL}" >/dev/null 2>&1
    exit 1
fi

TMPDIR="$(cat ${CONFIG} | egrep '^TMPDIR' \
	      | awk '{print substr($3, 2, length($3) - 2)}')"
IMAGES=$(ls -d $TMPDIR/deploy/images/*)

if [ "$QSP" = "false" ]
then
    SDK=$(ls -d $TMPDIR/deploy/sdk)
    echo "--> Installing the images and the sdk..."

    jobs=()

    images "${IMAGES}" "${INSTALL}/images" "${QSP}" &
    jobs+=(${!})
    sdk "${SDK}" "${INSTALL}/sdk"
    jobs+=(${!})

    for index in ${!jobs[@]}
    do
	job=${jobs[$index]}
	wait $job
    done
else
    echo "--> Installing the images..."
    images "${IMAGES}" "${INSTALL}/images" "${QSP}"
fi

#############################
# Restore stdout and stderr #
#############################

rm -f $PIPE
exec 1<&3 3<&-
exec 2<&4 4<&-

##############
# That's all #
##############

exit 0
