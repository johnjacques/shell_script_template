#!/usr/bin/env bash
######################################################################
#
# offsite_backup.sh
#
# Create or update a backup on external disk for offsite storage.
#
######################################################################

# Export everything
set -a

# Version
VERSION=__VERSION__

# Name
SCRIPT_NAME=$(basename "${0}")

# Script directory
SCRIPT_DIR=`dirname $0`
pushd ${SCRIPT_DIR} >/dev/null 2>&1
SCRIPT_DIR=$(pwd)
popd >/dev/null 2>&1

#############
# Functions #
#############

function getdv {
    if [ -f /etc/os-release ]; then
	# freedesktop.org and systemd
	. /etc/os-release
	DISTRO=$NAME
	VER=$VERSION_ID
    elif type lsb_release >/dev/null 2>&1; then
	# linuxbase.org
	DISTRO=$(lsb_release -si)
	VER=$(lsb_release -sr)
    else
	# Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
	DISTRO=$(uname -s)
	VER=$(uname -r)
    fi

    echo "$DISTRO:$VER"
}

function script_info {
    echo "--> ${SCRIPT_NAME} version is ${VERSION}"
    echo "--> running on $(getdv)"
}

function fail {
    echo "--FAILED--FAILED--FAILED--FAILED--FAILED--FAILED--FAILED--FAILED--"
    echo "--> $1"
    echo "--FAILED--FAILED--FAILED--FAILED--FAILED--FAILED--FAILED--FAILED--"
    exit 1
}

function create_snapshots {
    for name in "$@"
    do
	echo "--> Creating read-only snapshot of $name."
	btrfs subvolume snapshot -r \
	      /mnt/array/0/$name \
	      /mnt/array/0/snapshots/${name}_ro_for_offsite_backup \
	    || fail "Couldn't create read-only snapshot of ${name}!!!"
    done
}

function delete_snapshots {
    for name in "$@"
    do
	echo "--> Deleting read-only snapshot of $name."
	btrfs subvolume delete \
	      /mnt/array/0/snapshots/${name}_ro_for_offsite_backup \
	    || fail "Couldn't delete read-only snapshot of ${name}!!!"
    done
}

function sync_snapshots {
    for name in "$@"
    do
	echo "--> Syncing snapshot of $name to /mnt/offsite/${name}."
	ionice -c idle rsync -aq --delete \
	       /mnt/array/0/snapshots/${name}_ro_for_offsite_backup/ \
	       /mnt/offsite/$name \
	       || fail "Syncing $name failed!!!"
    done
}

############
# Defaults #
############

KEEP_TEMP="false"

######################################################################
# usage_
#
# Display usage and exit with the given code.

function usage {

    cat << EOF
${SCRIPT_NAME} [-h] [-k] [-v]
  -h : Display this wonderful help screen.
  -k : Keep temporary output instead of deleting it.
  -v : Display the version.

  The backup disk must be mounted on /mnt/offsite.

  The following subvolumes will be backed up.  @commons, @backup,
  @john, and, @paula.
EOF
    exit $1

}

##################################
# Parse the command line options #
##################################

while getopts "hkv" option ; do

    case $option in

        h)
            usage 0
            ;;

	k)
	    KEEP_TEMP="true"
	    ;;

	v)
	    script_info
	    exit 0
	    ;;

        *)
            usage 1
            ;;

    esac

done

shift $(($OPTIND - 1))

##########################################
# Capture stdout and stdin in a log file #
##########################################

exec 3<&1
exec 4<&2

# Create a log file and redirect. 
TEMP=$(mktemp -d /tmp/${SCRIPT_NAME}.XXXXXXXXXXXX)
LOG=$TEMP/log
PIPE=$TEMP/pipe

if [ "$KEEP_TEMP" = "true" ]
then
    echo "--> Saving temporary files in ${TEMP}"
else
    trap "rm -rf $TEMP" EXIT
fi

mknod $PIPE p
tee <$PIPE $LOG &
exec 1>&-
exec 1>$PIPE
exec 2>&-
exec 2>$PIPE

#######################
# Do something useful #
#######################

script_info

# Create the read-only snapshots.
echo "--> Creating read-only snapshots of subvolumes."
create_snapshots backup commons john paula

# Sync the read-only snapshots to /mnt/offsite."
echo "--> Syncing the read-only snapshots to /mnt/offsite."
sync_snapshots backup commons john paula

# Delete the read-only snapshots.
echo "--> Deleting read-only snapshots of subvolumes."
delete_snapshots backup commons john paula

#############################
# Restore stdout and stderr #
#############################

rm -f $PIPE
exec 1<&3 3<&-
exec 2<&4 4<&-

##############
# That's all #
##############

exit 0
